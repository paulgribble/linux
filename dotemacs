;; emacss local site-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp")

(setq debug-on-error t)
(setq eval-expression-print-length nil)

;; reftex
(require 'reftex)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode

;; wrap at window edge
(setq global-visual-line-mode t)

;; org-mode
(require 'org-install)
(require 'org-latex)
(require 'org-publish)
(require 'htmlize)
;;(setq org-export-html-postamble nil)

;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sh . t)
  (R . t)
  (python . t)
  (C . t)
  ))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(defun my-org-confirm-babel-evaluate (lang body)
           (not (string= lang "R")))  ; don't ask for R
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
(setq org-src-fontify-natively t)

;; AUCTeX
;;(require 'tex-site)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)

;; desktop save mode
(desktop-save-mode 1)

